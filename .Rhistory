words = c("win", "winning", "won", "winner", "wins")
wordStem(words)
library(SnowballC)
words = c("win", "winning", "won", "winner", "wins")
wordStem(words)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
documents <- documents <- Corpus(VectorSource(documents))
documents = tm_map(documents, content_transformer(tolower))
documents = tm_map(documents, removePunctuation)
documents = tm_map(documents, removeWords, stopwords("english"))
documents[[1]]$content
documents[[2]]$content
documents[[3]]$content
documents[[4]]$content
documents[[5]]$content
documents[[6]]$content
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
document <- documents <- Corpus(VectorSource(document))
document = tm_map(document, content_transformer(tolower))
document = tm_map(document, removePunctuation)
document = tm_map(document, removeWords, stopwords("english"))
document <- DocumentTermMatrix(document)
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
document <- documents <- Corpus(VectorSource(document))
document = tm_map(document, content_transformer(tolower))
document = tm_map(document, removePunctuation)
document = tm_map(document, removeWords, stopwords("english"))
document <- DocumentTermMatrix(document)
for (i in 1:length(document))
{
document[[i]]$content
}
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
document <- documents <- Corpus(VectorSource(document))
document = tm_map(document, content_transformer(tolower))
document = tm_map(document, removePunctuation)
document = tm_map(document, removeWords, stopwords("english"))
document <- DocumentTermMatrix(document)
for (i in 1:length(document))
{
strwrap(document[[i]])
}
}
stopRemove(documents)
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
document <- documents <- Corpus(VectorSource(document))
document = tm_map(document, content_transformer(tolower))
document = tm_map(document, removePunctuation)
document = tm_map(document, removeWords, stopwords("english"))
document <- DocumentTermMatrix(document)
document <- toString(document)
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
document <- documents <- Corpus(VectorSource(document))
document = tm_map(document, content_transformer(tolower))
document = tm_map(document, removePunctuation)
document = tm_map(document, removeWords, stopwords("english"))
document <- DocumentTermMatrix(document)
document <- toString(document[[1]])
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
document <- documents <- Corpus(VectorSource(document))
document = tm_map(document, content_transformer(tolower))
document = tm_map(document, removePunctuation)
document = tm_map(document, removeWords, stopwords("english"))
document <- DocumentTermMatrix(document)
document <-data.frame(text=unlist(sapply
(document, `[`, "content")), stringsAsFactors=F)
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
document <- documents <- Corpus(VectorSource(document))
document = tm_map(document, content_transformer(tolower))
document = tm_map(document, removePunctuation)
document = tm_map(document, removeWords, stopwords("english"))
document <- DocumentTermMatrix(document)
document <-data.frame(text=unlist
(sapply(document, `[`)), stringsAsFactors=F)
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist
(sapply(document, `[`)), stringsAsFactors=F)
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
for (i in 1:length(document))
{
document[[i]]$content
}
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
for (i in 1:length(document))
{
row <- document[i,]
row$content
}
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
for (i in 1:length(document))
{
row <- document[i,]
row
}
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
for (i in 1:length(document))
{
row <- document[i,]
row
}
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
for (i in 1:length(document))
{
document[i]$content
}
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
for (i in 1:length(document))
{
document[i]$content
}
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
document
}
stopRemove(documents)
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
document
}
d <- stopRemove(documents)
d
library(tm)
documents = c("She had toast for breakfast",
"The coffee this morning was excellent",
"For lunch let's all have pancakes",
"Later in the day, there will be more talks",
"The talks on the first day were great",
"The second day should have good presentations too")
stopRemove <- function(document)
{
# Convert the character array to a corpus
document <- documents <- Corpus(VectorSource(document))
# Make all characters lowercase
document = tm_map(document, content_transformer(tolower))
#Strip all punctuation
document = tm_map(document, removePunctuation)
#Remove stopwords
document = tm_map(document, removeWords, stopwords("english"))
#Convert the corpus to a data frame
document <-data.frame(text=unlist(sapply(document, `[`, "content")),
stringsAsFactors=F)
return(document)
}
d <- stopRemove(documents)
d
